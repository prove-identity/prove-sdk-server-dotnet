//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Prove.Proveapi
{
    using Newtonsoft.Json;
    using Prove.Proveapi.Hooks;
    using Prove.Proveapi.Models.Components;
    using Prove.Proveapi.Models.Errors;
    using Prove.Proveapi.Utils;
    using Prove.Proveapi.Utils.Retries;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;

    /// <summary>
    /// Prove APIs: This specification describes the Prove API.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// OpenAPI Spec - generated.
    /// </remarks>
    /// </summary>
    public interface IProveapi
    {
        public IV3 V3 { get; }
    }

    public class SDKConfig
    {
        /// <summary>
        /// Server identifiers available to the SDK.
        /// </summary>
        public enum Server {
        UatUs,
        ProdUs,
        UatEu,
        ProdEu,
        }

        /// <summary>
        /// Server URLs available to the SDK.
        /// </summary>
        public static readonly Dictionary<Server, string> ServerMap = new Dictionary<Server, string>()
        {
            { Server.UatUs, "https://platform.uat.proveapis.com" },
            { Server.ProdUs, "https://platform.proveapis.com" },
            { Server.UatEu, "https://platform.uat.eu.proveapis.com" },
            { Server.ProdEu, "https://platform.eu.proveapis.com" },
        };

        public string ServerUrl = "";
        public Server? ServerName = null;
        public SDKHooks Hooks = new SDKHooks();
        public RetryConfig? RetryConfig = null;

        public string GetTemplatedServerUrl()
        {
            if (!String.IsNullOrEmpty(this.ServerUrl))
            {
                return Utilities.TemplateUrl(Utilities.RemoveSuffix(this.ServerUrl, "/"), new Dictionary<string, string>());
            }
            if (this.ServerName is null)
            {
                this.ServerName = SDKConfig.Server.UatUs;
            }
            else if (!SDKConfig.ServerMap.ContainsKey(this.ServerName.Value))
            {
                throw new Exception($"Invalid server \"{this.ServerName.Value}\"");
            }

            Dictionary<string, string> serverDefault = new Dictionary<string, string>();

            return Utilities.TemplateUrl(SDKConfig.ServerMap[this.ServerName.Value], serverDefault);
        }

        public ISpeakeasyHttpClient InitHooks(ISpeakeasyHttpClient client)
        {
            string preHooksUrl = GetTemplatedServerUrl();
            var (postHooksUrl, postHooksClient) = this.Hooks.SDKInit(preHooksUrl, client);
            if (preHooksUrl != postHooksUrl)
            {
                this.ServerUrl = postHooksUrl;
            }
            return postHooksClient;
        }
    }

    /// <summary>
    /// Prove APIs: This specification describes the Prove API.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// OpenAPI Spec - generated.
    /// </remarks>
    /// </summary>
    public class Proveapi: IProveapi
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.0.3";
        private const string _sdkGenVersion = "2.593.4";
        private const string _openapiDocVersion = "1.0.0";
        private const string _userAgent = "speakeasy-sdk/csharp 0.0.3 2.593.4 1.0.0 Prove.Proveapi";
        private string _serverUrl = "";
        private SDKConfig.Server? _server = null;
        private ISpeakeasyHttpClient _client;
        private Func<Prove.Proveapi.Models.Components.Security>? _securitySource;
        public IV3 V3 { get; private set; }

        public Proveapi(string? auth = null, Func<string>? authSource = null, SDKConfig.Server? server = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {
            if (server != null)
            {
              _server = server;
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
                _serverUrl = serverUrl;
            }

            _client = client ?? new SpeakeasyHttpClient();

            if(authSource != null)
            {
                _securitySource = () => new Prove.Proveapi.Models.Components.Security() { Auth = authSource() };
            }
            else if(auth != null)
            {
                _securitySource = () => new Prove.Proveapi.Models.Components.Security() { Auth = auth };
            }

            SDKConfiguration = new SDKConfig()
            {
                ServerName = _server,
                ServerUrl = _serverUrl,
                RetryConfig = retryConfig
            };

            _client = SDKConfiguration.InitHooks(_client);


            V3 = new V3(_client, _securitySource, _serverUrl, SDKConfiguration);
        }
    }
}