//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Prove.Proveapi
{
    using Newtonsoft.Json;
    using Prove.Proveapi.Hooks;
    using Prove.Proveapi.Models.Components;
    using Prove.Proveapi.Models.Errors;
    using Prove.Proveapi.Utils;
    using Prove.Proveapi.Utils.Retries;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;

    /// <summary>
    /// Prove APIs: This specification describes the Prove API.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// OpenAPI Spec - generated.
    /// </remarks>
    /// </summary>
    public interface IProveAPI
    {
        public IV3 V3 { get; }
        public IIdentity Identity { get; }
    }


    /// <summary>
    /// Prove APIs: This specification describes the Prove API.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// OpenAPI Spec - generated.
    /// </remarks>
    /// </summary>
    public class ProveAPI: IProveAPI
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "1.2.0";
        private const string _sdkGenVersion = "2.632.0";
        private const string _openapiDocVersion = "1.0.0";
        public IV3 V3 { get; private set; }
        public IIdentity Identity { get; private set; }

        public ProveAPI(SDKConfig config)
        {
            SDKConfiguration = config;
            InitHooks();

            V3 = new V3(SDKConfiguration);

            Identity = new Identity(SDKConfiguration);
        }

        public ProveAPI(string? auth = null, Func<string>? authSource = null, SDKConfig.Server? server = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
            }
            Func<Prove.Proveapi.Models.Components.Security>? _securitySource = null;

            if(authSource != null)
            {
                _securitySource = () => new Prove.Proveapi.Models.Components.Security() { Auth = authSource() };
            }
            else if(auth != null)
            {
                _securitySource = () => new Prove.Proveapi.Models.Components.Security() { Auth = auth };
            }

            SDKConfiguration = new SDKConfig(client)
            {
                ServerName = server,
                ServerUrl = serverUrl == null ? "" : serverUrl,
                SecuritySource = _securitySource,
                RetryConfig = retryConfig
            };

            InitHooks();

            V3 = new V3(SDKConfiguration);

            Identity = new Identity(SDKConfiguration);
        }

        private void InitHooks()
        {
            string preHooksUrl = SDKConfiguration.GetTemplatedServerUrl();
            var (postHooksUrl, postHooksClient) = SDKConfiguration.Hooks.SDKInit(preHooksUrl, SDKConfiguration.Client);
            var config = SDKConfiguration;
            if (preHooksUrl != postHooksUrl)
            {
                config.ServerUrl = postHooksUrl;
            }
            config.Client = postHooksClient;
            SDKConfiguration = config;
        }

        public class SDKBuilder
        {
            private SDKConfig _sdkConfig = new SDKConfig(client: new SpeakeasyHttpClient());

            public SDKBuilder() { }

            public SDKBuilder WithServer(SDKConfig.Server server)
            {
                _sdkConfig.ServerName = server;
                return this;
            }

            public SDKBuilder WithServerUrl(string serverUrl, Dictionary<string, string>? serverVariables = null)
            {
                if (serverVariables != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, serverVariables);
                }
                _sdkConfig.ServerUrl = serverUrl;
                return this;
            }

            public SDKBuilder WithAuthSource(Func<string> authSource)
            {
                _sdkConfig.SecuritySource = () => new Prove.Proveapi.Models.Components.Security() { Auth = authSource() };
                return this;
            }

            public SDKBuilder WithAuth(string auth)
            {
                _sdkConfig.SecuritySource = () => new Prove.Proveapi.Models.Components.Security() { Auth = auth };
                return this;
            }

            public SDKBuilder WithClient(ISpeakeasyHttpClient client)
            {
                _sdkConfig.Client = client;
                return this;
            }

            public SDKBuilder WithRetryConfig(RetryConfig retryConfig)
            {
                _sdkConfig.RetryConfig = retryConfig;
                return this;
            }

            public ProveAPI Build()
            {
              return new ProveAPI(_sdkConfig);
            }

        }

        public static SDKBuilder Builder() => new SDKBuilder();
    }
}