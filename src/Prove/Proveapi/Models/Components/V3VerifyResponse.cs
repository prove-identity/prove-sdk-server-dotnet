//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Prove.Proveapi.Models.Components
{
    using Newtonsoft.Json;
    using Prove.Proveapi.Utils;
    
    public class V3VerifyResponse
    {

        /// <summary>
        /// A bearer token for use by the Prove client SDK.
        /// </summary>
        [JsonProperty("authToken")]
        public string? AuthToken { get; set; }

        /// <summary>
        /// The unique ID that Prove generates for the flow. To continue the flow, the field will also be used for each of the subsequent API calls in the same flow - it cannot be reused outside of a single flow.
        /// </summary>
        [JsonProperty("correlationId")]
        public string CorrelationId { get; set; } = default!;

        /// <summary>
        /// The result of the possession check. Possible values are `pending` and `not_applicable`, based on the `possessionType` passed in the input. Clients will have to call the Verify Status API to get a result if `possessionResult=pending`.
        /// </summary>
        [JsonProperty("possessionResult")]
        public string PossessionResult { get; set; } = default!;

        /// <summary>
        /// The result of the combination of `verifyResult` and `possessionResult`. Possible values are `true`, `pending`, and `false`. The value will be `pending` until the results of both Verify and Possession are returned or one of them fails, blocking the other.
        /// </summary>
        [JsonProperty("success")]
        public string Success { get; set; } = default!;

        /// <summary>
        /// The result of the Verify process. Possible values are `success`, `pending`, and `failed`. If the Verify result is `pending`, clients will need to call the Verify Status API to get a result.
        /// </summary>
        [JsonProperty("verifyResult")]
        public string VerifyResult { get; set; } = default!;
    }
}